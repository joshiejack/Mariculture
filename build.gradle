buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

ext.buildnumber=""
if (System.getenv().BUILD_NUMBER) {
    ext.buildnumber="-" + System.getenv().BUILD_NUMBER
}

version = "${minecraft_version}-${mod_version}${buildnumber}"
group= "uk.joshiejack.mariculture" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Mariculture-Deluxe"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "eclipse"
}

repositories {
    ivy {
        name "CoFHCore"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2229/536/[module]-[revision].[ext]'
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    compile name: 'CoFHCore', version: '[1.7.10]3.0.0RC5-207-dev', ext: 'jar'

    compile "codechicken:CodeChickenLib:${minecraft_version}-1.1.3.127:dev"
    compile "codechicken:CodeChickenCore:${minecraft_version}-1.0.4.35:dev"
    compile "codechicken:NotEnoughItems:${minecraft_version}-1.0.4.90:dev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from('etc/mariculture') {
        include '**/*.txt'
        include '**/*.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
        exclude '**/*todolist.txt'
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'mariculture.fishery.VanillaOverride'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

task marinotechJar(type: Jar) {
    baseName = 'Mariculture-Base'
    manifest {
        attributes 'FMLCorePlugin': 'mariculture.fishery.VanillaOverride'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    
    from('etc/mariculture') {
        include '**/*.txt'
        include '**/*.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    
    from zipTree(jar.archivePath).matching {
        exclude 'maritech/**', 'assets/maritech/**'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
}

task deobfJar(type: Jar) {
    manifest {
        attributes 'FMLCorePlugin': 'mariculture.fishery.VanillaOverride'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    from sourceSets.main.output
    classifier = 'dev'
}

marinotechJar.dependsOn('reobf')

artifacts {
    archives marinotechJar
    archives deobfJar
    archives sourceJar
}